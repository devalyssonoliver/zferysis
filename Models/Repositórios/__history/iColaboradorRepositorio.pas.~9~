unit iColaboradorRepositorio;

interface

uses
  iColaborador, Data.DB, FireDAC.Comp.Client, dmGerenciadorConexao,
  System.SysUtils, uFuncoes, Colaborador, System.Variants, FireDAC.Stan.Param;

type
  TColaboradorRepository = class(TInterfacedObject, IColaboradorRepository)
  private
    FQuery: TFDQuery;
    procedure SetUpQuery(const SQLText: string);
    procedure ExecuteSQL;
  public
    constructor Create;
    destructor Destroy; override;

    function Inserir(const Codigo, CodSetor: Integer; Nome, Matricula: String;
      DataContrato, DataCadastro, PeriodoAquisitivo, PeriodoConsessivo: TDate;
      Ativo: Boolean): Boolean;
    function Deletar(const Codigo: Integer): Boolean;
    function Editar(const Codigo, CodSetor: Integer; Nome, Matricula: String;
      DataContrato, PeriodoAquisitivo, PeriodoConsessivo: TDate;
      Ativo: Boolean): Boolean;
    procedure BuscarUsuario(const CriterioIndex: Integer; const Valor: Variant;
      ADataSet: TDataSet);
    procedure ListarTodos(ADataSet: TDataSet);
    function CarregarColaborador(const Codigo: Integer): TColaborador;

  const
    CRITERIO_CODIGO = 0;
    CRITERIO_NOME = 1;
    CRITERIO_MATRICULA = 2;

  end;

implementation

function TColaboradorRepository.CarregarColaborador(const Codigo: Integer)
  : TColaborador;
var
  Colaborador: TColaborador;
begin
  Result := nil;
  SetUpQuery
    ('SELECT codigo, nome, matricula, codigo_setor, data_contrato, periodo_aquisitivo, periodo_concessivo, data_cadastro FROM colaboradores WHERE codigo :codigo;');
  FQuery.Params.ParamByName('codigo').AsInteger := Codigo;
  FQuery.Open;

  if not FQuery.IsEmpty then
  begin
    Colaborador := TColaborador.Create;
    Colaborador.Codigo := FQuery.Params.ParamByName('codigo').AsInteger;
    Colaborador.Nome := FQuery.Params.ParamByName('nome').AsString;
    Colaborador.Matricula := FQuery.Params.ParamByName('matricula').AsString;
    Colaborador.CodSetor := FQuery.Params.ParamByName('codigo_setor').AsInteger;
    Colaborador.DataContrato := FQuery.Params.ParamByName
      ('data_contrato').AsDate;
    Colaborador.DataCadastro := FQuery.Params.ParamByName
      ('data_cadastro').AsDate;
    Colaborador.PeriodoAquisitivo := FQuery.Params.ParamByName
      ('periodo_aquisitivo').AsDate;
    Colaborador.PeriodoConsessivo := FQuery.Params.ParamByName
      ('periodo_concessivo').AsDate;
    Result := Colaborador;

  end;

end;

constructor TColaboradorRepository.Create;
begin
  inherited Create;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := GerenciadorConexao.fdConn;
end;

destructor TColaboradorRepository.Destroy;
begin
  FQuery.Free;
  inherited Destroy;
end;

procedure TColaboradorRepository.SetUpQuery(const SQLText: string);
begin
  FQuery.SQL.Text := SQLText;
end;

procedure TColaboradorRepository.ExecuteSQL;
begin
  try
    FQuery.ExecSQL;
  except
    on E: Exception do
      MsgBox('Erro ao executar operação no banco de dados.', E.Message,
        False, 2);
  end;
end;

function TColaboradorRepository.Inserir(const Codigo, CodSetor: Integer;
  Nome, Matricula: String; DataContrato, DataCadastro, PeriodoAquisitivo,
  PeriodoConsessivo: TDate; Ativo: Boolean): Boolean;
begin
  Result := False;
  try
    SetUpQuery
      ('INSERT INTO colaboradores (codigo, nome, matricula, codigo_setor, data_contrato, periodo_aquisitivo, periodo_concessivo, data_cadastro, ativo) '
      + 'VALUES (:codigo, :nome, :matricula, :codigo_setor, :data_contrato, :periodo_aquisitivo, :periodo_concessivo, :data_cadastro, :ativo)');
    FQuery.Params.ParamByName('codigo').AsInteger := Codigo;
    FQuery.Params.ParamByName('nome').AsString := Nome;
    FQuery.Params.ParamByName('matricula').AsString := Matricula;
    FQuery.Params.ParamByName('codigo_setor').AsInteger := CodSetor;
    FQuery.Params.ParamByName('data_contrato').AsDate := DataContrato;
    FQuery.Params.ParamByName('data_cadastro').AsDate := Now;
    FQuery.Params.ParamByName('periodo_aquisitivo').AsDate := PeriodoAquisitivo;
    FQuery.Params.ParamByName('periodo_concessivo').AsDate := PeriodoConsessivo;
    FQuery.Params.ParamByName('ativo').AsBoolean := Ativo;

    ExecuteSQL;
    Result := True;
  except
    on E: Exception do
      MsgBox('Erro ao inserir o colaborador.', E.Message, False, 2);
  end;
end;

function TColaboradorRepository.Deletar(const Codigo: Integer): Boolean;
begin
  Result := False;
  try
    SetUpQuery('DELETE FROM colaboradores WHERE codigo = :codigo');
    FQuery.Params.ParamByName('codigo').AsInteger := Codigo;

    ExecuteSQL;
    Result := True;
  except
    on E: Exception do
      MsgBox('Erro ao excluir o colaborador.', E.Message, False, 2);
  end;
end;

function TColaboradorRepository.Editar(const Codigo, CodSetor: Integer;
  Nome, Matricula: String; DataContrato, PeriodoAquisitivo, PeriodoConsessivo
  : TDate; Ativo: Boolean): Boolean;
begin
  Result := False;
  try
    SetUpQuery
      ('UPDATE colaboradores SET nome=:nome, matricula=:matricula, codigo_setor=:codigo_setor, '
      + 'data_contrato=:data_contrato, periodo_aquisitivo=:periodo_aquisitivo, periodo_concessivo=:periodo_concessivo, ativo=:ativo '
      + 'WHERE codigo=:codigo');
    FQuery.Params.ParamByName('codigo').AsInteger := Codigo;
    FQuery.Params.ParamByName('nome').AsString := Nome;
    FQuery.Params.ParamByName('matricula').AsString := Matricula;
    FQuery.Params.ParamByName('codigo_setor').AsInteger := CodSetor;
    FQuery.Params.ParamByName('data_contrato').AsDate := DataContrato;
    FQuery.Params.ParamByName('periodo_aquisitivo').AsDate := PeriodoAquisitivo;
    FQuery.Params.ParamByName('periodo_concessivo').AsDate := PeriodoConsessivo;
    FQuery.Params.ParamByName('ativo').AsBoolean := Ativo;

    ExecuteSQL;
    Result := True;
  except
    on E: Exception do
      MsgBox('Erro ao editar o colaborador.', E.Message, False, 2);
  end;
end;

procedure TColaboradorRepository.BuscarUsuario(const CriterioIndex: Integer;
  const Valor: Variant; ADataSet: TDataSet);
begin
  if VarIsNull(Valor) or (Trim(VarToStr(Valor)) = '') then
    raise Exception.Create('Informe um valor válido para a pesquisa.');

  if ADataSet is TFDQuery then
  begin
    try
      SetUpQuery('SELECT * FROM public.vcolaboradores WHERE ');
      case CriterioIndex of
        CRITERIO_CODIGO:
          begin
            FQuery.SQL.Add('codigo = :Valor');
            FQuery.ParamByName('Valor').Value :=
              StrToIntDef(VarToStr(Valor), 0);
          end;
        CRITERIO_NOME:
          begin
            FQuery.SQL.Add('nome ILIKE :Valor');
            FQuery.ParamByName('Valor').AsString := '%' + VarToStr(Valor) + '%';
          end;
        CRITERIO_MATRICULA:
          begin
            FQuery.SQL.Add('matricula ILIKE :Valor');
            FQuery.ParamByName('Valor').AsString := '%' + VarToStr(Valor) + '%';
          end;
      else
        raise Exception.Create('Critério de pesquisa inválido.');
      end;

      FQuery.Open;

      if FQuery.IsEmpty then
        raise Exception.Create
          ('Nenhum usuário encontrado com o critério informado.');

    except
      on E: Exception do
        MsgBox('Erro ao buscar colaborador.', E.Message, False, 2);
    end;
  end;
end;

procedure TColaboradorRepository.ListarTodos(ADataSet: TDataSet);
begin
  if ADataSet is TFDQuery then
  begin
    TFDQuery(ADataSet).SQL.Text := 'SELECT * FROM vcolaboradores';
    TFDQuery(ADataSet).Open;
  end;
end;

end.
